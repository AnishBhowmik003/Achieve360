[
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "rds",
        "kind": 5,
        "importPath": "createRDS",
        "description": "createRDS",
        "peekOfCode": "rds = boto3.client('rds')\ntry:\n    #Create RDS database instance\n    response = rds.create_db_instance(\n        DBInstanceIdentifier='database-2.cvmicwscqnza.us-east-2.rds.amazonaws.com',\n        AllocatedStorage=20,\n        DBInstanceClass='db.t3.micro',\n        Engine='mysql',\n        MasterUsername='',\n        MasterPassword='',",
        "detail": "createRDS",
        "documentation": {}
    },
    {
        "label": "calculateMetabolicRate",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def calculateMetabolicRate(weight, height, age, sex):\n    if sex == \"male\":\n        bmr = 66 + (6.3 * weight) + (12.9 * height) - (6.8 * age)\n    else:\n        bmr = 655 + (4.3 * weight) + (4.7 * height) - (4.7 * age)\n    return bmr\ndef calculateMaintenanceCalories(bmr, activity_level):\n    activity_levels = {\n        \"none\": 1.2,\n        \"lightly active\": 1.375,",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "calculateMaintenanceCalories",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def calculateMaintenanceCalories(bmr, activity_level):\n    activity_levels = {\n        \"none\": 1.2,\n        \"lightly active\": 1.375,\n        \"moderately active\": 1.55,\n        \"very active\": 1.725,\n        \"extra active\": 1.9\n    }\n    return bmr * activity_levels.get(activity_level.lower(), 1.725)\ndef calculateWeightLossCalories(bmr, activity_level):",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "calculateWeightLossCalories",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def calculateWeightLossCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) - 500\ndef calculateWeightGainCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) + 500\ndef generateDietPlan(goal):\n    weight_gain_foods = {\n        \"Protein Sources\": [\"Chicken breast\", \"Salmon\", \"Tofu\", \"Greek yogurt\"],\n        \"Carbohydrate Sources\": [\"Brown rice\", \"Sweet potatoes\", \"Quinoa\", \"Whole wheat bread\"],\n        \"Healthy Fats\": [\"Avocado\", \"Nuts\", \"Olive oil\", \"Flaxseeds\"],\n        \"Fruits\": [\"Bananas\", \"Berries\", \"Oranges\", \"Apples\"],",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "calculateWeightGainCalories",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def calculateWeightGainCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) + 500\ndef generateDietPlan(goal):\n    weight_gain_foods = {\n        \"Protein Sources\": [\"Chicken breast\", \"Salmon\", \"Tofu\", \"Greek yogurt\"],\n        \"Carbohydrate Sources\": [\"Brown rice\", \"Sweet potatoes\", \"Quinoa\", \"Whole wheat bread\"],\n        \"Healthy Fats\": [\"Avocado\", \"Nuts\", \"Olive oil\", \"Flaxseeds\"],\n        \"Fruits\": [\"Bananas\", \"Berries\", \"Oranges\", \"Apples\"],\n        \"Vegetables\": [\"Broccoli\", \"Spinach\", \"Bell peppers\", \"Carrots\"]\n    }",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "generateDietPlan",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def generateDietPlan(goal):\n    weight_gain_foods = {\n        \"Protein Sources\": [\"Chicken breast\", \"Salmon\", \"Tofu\", \"Greek yogurt\"],\n        \"Carbohydrate Sources\": [\"Brown rice\", \"Sweet potatoes\", \"Quinoa\", \"Whole wheat bread\"],\n        \"Healthy Fats\": [\"Avocado\", \"Nuts\", \"Olive oil\", \"Flaxseeds\"],\n        \"Fruits\": [\"Bananas\", \"Berries\", \"Oranges\", \"Apples\"],\n        \"Vegetables\": [\"Broccoli\", \"Spinach\", \"Bell peppers\", \"Carrots\"]\n    }\n    weight_loss_foods = {\n        \"Lean Protein Sources\": [\"Turkey breast\", \"White fish\", \"Egg whites\", \"Cottage cheese\"],",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "createTotalPlan",
        "kind": 2,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "def createTotalPlan(weightGoal, weight, height, age, sex, activity_level):\n    output = str(generateDietPlan(weightGoal))\n    bmr = calculateMetabolicRate(weight, height, age, sex)\n    if weightGoal == \"maintain\":\n        goalCalories = calculateMaintenanceCalories(bmr, activity_level)\n    elif weightGoal == \"gain\":\n        goalCalories = calculateWeightGainCalories(bmr, activity_level)\n    elif weightGoal == \"loss\":\n        goalCalories = calculateWeightLossCalories(bmr, activity_level)\n    pounds = weight * 2.205",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "weightGoal",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "weightGoal = sys.argv[1] #options are gain, loss, maintain\nweight = float(sys.argv[2]) / 2.205\nheight = float(sys.argv[3]) * 2.54\nage = float(sys.argv[4])\nsex = sys.argv[5]\nactivity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "weight = float(sys.argv[2]) / 2.205\nheight = float(sys.argv[3]) * 2.54\nage = float(sys.argv[4])\nsex = sys.argv[5]\nactivity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "height = float(sys.argv[3]) * 2.54\nage = float(sys.argv[4])\nsex = sys.argv[5]\nactivity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "age = float(sys.argv[4])\nsex = sys.argv[5]\nactivity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "sex",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "sex = sys.argv[5]\nactivity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "activity_level",
        "kind": 5,
        "importPath": "dietPlan",
        "description": "dietPlan",
        "peekOfCode": "activity_level = sys.argv[6] #options are none, lightly active, moderatly active, very active, extra active\nprint(createTotalPlan(weightGoal, weight, height, age, sex, activity_level))\nsys.stdout.flush()",
        "detail": "dietPlan",
        "documentation": {}
    },
    {
        "label": "calculateMetabolicRate",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def calculateMetabolicRate(weight, height, age, sex):\n    if sex == \"male\":\n        bmr = 66 + (6.3 * weight) + (12.9 * height) - (6.8 * age)\n    else:\n        bmr = 655 + (4.3 * weight) + (4.7 * height) - (4.7 * age)\n    return bmr\ndef calculateMaintenanceCalories(bmr, activity_level):\n    activity_levels = {\n        \"none\": 1.2,\n        \"lightly active\": 1.375,",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "calculateMaintenanceCalories",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def calculateMaintenanceCalories(bmr, activity_level):\n    activity_levels = {\n        \"none\": 1.2,\n        \"lightly active\": 1.375,\n        \"moderately active\": 1.55,\n        \"very active\": 1.725,\n        \"extra active\": 1.9\n    }\n    return bmr * activity_levels.get(activity_level.lower(), 1.725)\ndef calculateWeightLossCalories(bmr, activity_level):",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "calculateWeightLossCalories",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def calculateWeightLossCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) - 500\ndef calculateWeightGainCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) + 500\ndef generateWorkoutPlan(weight, height, age, sex):\n    bmi = weight / ((height/100) ** 2)\n    intensity_levels = {\n        \"low\": (18.5, \"30 minutes\"),\n        \"medium\": (25, \"45 minutes\"),\n        \"high\": (float('inf'), \"60 minutes\")",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "calculateWeightGainCalories",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def calculateWeightGainCalories(bmr, activity_level):\n    return calculateMaintenanceCalories(bmr, activity_level) + 500\ndef generateWorkoutPlan(weight, height, age, sex):\n    bmi = weight / ((height/100) ** 2)\n    intensity_levels = {\n        \"low\": (18.5, \"30 minutes\"),\n        \"medium\": (25, \"45 minutes\"),\n        \"high\": (float('inf'), \"60 minutes\")\n    }\n    for level, (threshold, duration) in intensity_levels.items():",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "generateWorkoutPlan",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def generateWorkoutPlan(weight, height, age, sex):\n    bmi = weight / ((height/100) ** 2)\n    intensity_levels = {\n        \"low\": (18.5, \"30 minutes\"),\n        \"medium\": (25, \"45 minutes\"),\n        \"high\": (float('inf'), \"60 minutes\")\n    }\n    for level, (threshold, duration) in intensity_levels.items():\n        if bmi < threshold:\n            intensity = level",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "generateWeightliftingPlan",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def generateWeightliftingPlan(weight, height, age, sex):\n    bmi = weight / ((height/100) ** 2)\n    intensity_levels = {\n        \"low\": (18.5, \"30 minutes\"),\n        \"medium\": (25, \"45 minutes\"),\n        \"high\": (float('inf'), \"60 minutes\")\n    }\n    for level, (threshold, duration) in intensity_levels.items():\n        if bmi < threshold:\n            intensity = level",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "generateDietPlan",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def generateDietPlan(goal, weight, height, age, sex):\n    weight_gain_foods = {\n        \"Protein Sources\": [\"Chicken breast\", \"Salmon\", \"Tofu\", \"Greek yogurt\"],\n        \"Carbohydrate Sources\": [\"Brown rice\", \"Sweet potatoes\", \"Quinoa\", \"Whole wheat bread\"],\n        \"Healthy Fats\": [\"Avocado\", \"Nuts\", \"Olive oil\", \"Flaxseeds\"],\n        \"Fruits\": [\"Bananas\", \"Berries\", \"Oranges\", \"Apples\"],\n        \"Vegetables\": [\"Broccoli\", \"Spinach\", \"Bell peppers\", \"Carrots\"]\n    }\n    weight_loss_foods = {\n        \"Lean Protein Sources\": [\"Turkey breast\", \"White fish\", \"Egg whites\", \"Cottage cheese\"],",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "fitnessPlanner",
        "description": "fitnessPlanner",
        "peekOfCode": "def main():\n    print(\"Welcome to the Fitness Planner!\")\n    print(\"Please provide your details.\")\n    weight = float(input(\"Weight (kg): \"))\n    height = float(input(\"Height (cm): \"))\n    age = int(input(\"Age: \"))\n    sex = input(\"Sex (male/female/other): \")\n    activity_level = input(\"Activity Level (none/lightly active/moderately active/very active/extra active): \")\n    bmr = calculateMetabolicRate(weight, height, age, sex)\n    maintenance_calories = calculateMaintenanceCalories(bmr, activity_level)",
        "detail": "fitnessPlanner",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "sportTables",
        "description": "sportTables",
        "peekOfCode": "def filter_data(sport, position):\n    nfl_data = []\n    nba_data = []\n    with open('NFL.csv', 'r') as nfl_file, open('NBA.csv', 'r') as nba_file:\n        nfl_reader = csv.DictReader(nfl_file)\n        nba_reader = csv.DictReader(nba_file)\n        if sport == 'football':\n            for row in nfl_reader:\n                if row['POS'] == position:\n                    nfl_data.append(row)",
        "detail": "sportTables",
        "documentation": {}
    }
]